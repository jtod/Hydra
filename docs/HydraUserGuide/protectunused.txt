** Text editor

You'll need to edit text files to develop your circuit specification
source code.  A text editor allows you to write and modify plain text
characters.  It is quite different from a word processor, which
inserts invisible formatting commands.

You can use any text editor you like; the choice is personal
preference.  Some text editors, such as Notepad, are aimed at
beginners.  Two standard text editors are popular among software
developers: emacs and vim.  It's also possible to get word processors,
such as Word, to edit text, but you have to be careful about saving
your document as plain text.  Another alternative is to use an
integrated development environment.  The choice is yours.

** Shell

A shell is an environment where you interact with software using text
commands.  There are many shells; they are largely similar but use
different syntax.  Bash is available on every platform, and has become
a defacto standard.  Windows has several shells of its own, including
Command Prompt and PowerShell, but you can also use bash on Windows.
You can use any shell you like.

Instead of a shell, it's also possible to use a GUI (graphical user
interface).

Whatever shell you use, you need to learn some basic commands: how to
change the directory, list the files in the directory, etc.

If you're using Windows, it's simplest to use either Command Prompt or
PowerShell as these comes pre-installed with Windows.  If you wish to
use bash, here is a tutorial on [how to install bash on
Windows:](https://itsfoss.com/install-bash-on-windows/).  Another
approach is to [install Cygwin](http://www.cygwin.com/), which
provides an entire Gnu/Linux suite of software on Windows.

The commands and examples given in this Guide work with all three:
bash, Windows Command Prompt, and Windows PowerShell.

** ghc compiler

Hydra requires the ghc compiler suite for Haskell.  It's best to
install the Haskell Platform (www.haskell.org), which gives you the
ghc compiler as well as some essential additional tools, including the
cabal package system and standard libraries.  Check that the
installation is working with these commands:
   
#+BEGIN_SRC shell
$ ghc --version
The Glorious Glasgow Haskell Compilation System, version 8.10.2
$ cabal --version
cabal-install version 3.2.0.0
compiled using version 3.2.0.0 of the Cabal library 
#+END_SRC
